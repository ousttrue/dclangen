// This source code was generated by dclangen
module lua.lauxlib;
import lua.lua;
import lua.vcruntime;
import lua.corecrt_wstdio;
enum LUA_ERRFILE = ( LUA_ERRERR + 1 );
enum LUA_LOADED_TABLE = "_LOADED";
enum LUA_PRELOAD_TABLE = "_PRELOAD";
enum LUAL_NUMSIZES = ( ( lua_Integer ).sizeof  * 16 + ( lua_Number ).sizeof  );
enum LUA_NOREF = ( - 2 );
enum LUA_REFNIL = ( - 1 );
enum LUA_FILEHANDLE = "FILE*";
struct luaL_Reg
{
    byte* name;
    lua_CFunction func;
}
extern(C) void luaL_checkversion_(lua_State* L, lua_Number ver, size_t sz);
extern(C) int luaL_getmetafield(lua_State* L, int obj, byte* e);
extern(C) int luaL_callmeta(lua_State* L, int obj, byte* e);
extern(C) byte* luaL_tolstring(lua_State* L, int idx, size_t* len);
extern(C) int luaL_argerror(lua_State* L, int arg, byte* extramsg);
extern(C) byte* luaL_checklstring(lua_State* L, int arg, size_t* l);
extern(C) byte* luaL_optlstring(lua_State* L, int arg, byte* def, size_t* l);
extern(C) lua_Number luaL_checknumber(lua_State* L, int arg);
extern(C) lua_Number luaL_optnumber(lua_State* L, int arg, lua_Number def);
extern(C) lua_Integer luaL_checkinteger(lua_State* L, int arg);
extern(C) lua_Integer luaL_optinteger(lua_State* L, int arg, lua_Integer def);
extern(C) void luaL_checkstack(lua_State* L, int sz, byte* msg);
extern(C) void luaL_checktype(lua_State* L, int arg, int t);
extern(C) void luaL_checkany(lua_State* L, int arg);
extern(C) int luaL_newmetatable(lua_State* L, byte* tname);
extern(C) void luaL_setmetatable(lua_State* L, byte* tname);
extern(C) void* luaL_testudata(lua_State* L, int ud, byte* tname);
extern(C) void* luaL_checkudata(lua_State* L, int ud, byte* tname);
extern(C) void luaL_where(lua_State* L, int lvl);
extern(C) int luaL_error(lua_State* L, byte* fmt);
extern(C) int luaL_checkoption(lua_State* L, int arg, byte* def, byte** lst);
extern(C) int luaL_fileresult(lua_State* L, int stat, byte* fname);
extern(C) int luaL_execresult(lua_State* L, int stat);
extern(C) int luaL_ref(lua_State* L, int t);
extern(C) void luaL_unref(lua_State* L, int t, int _ref);
extern(C) int luaL_loadfilex(lua_State* L, byte* filename, byte* mode);
extern(C) int luaL_loadbufferx(lua_State* L, byte* buff, size_t sz, byte* name, byte* mode);
extern(C) int luaL_loadstring(lua_State* L, byte* s);
extern(C) lua_State* luaL_newstate();
extern(C) lua_Integer luaL_len(lua_State* L, int idx);
extern(C) byte* luaL_gsub(lua_State* L, byte* s, byte* p, byte* r);
extern(C) void luaL_setfuncs(lua_State* L, luaL_Reg* l, int nup);
extern(C) int luaL_getsubtable(lua_State* L, int idx, byte* fname);
extern(C) void luaL_traceback(lua_State* L, lua_State* L1, byte* msg, int level);
extern(C) void luaL_requiref(lua_State* L, const char* modname, lua_CFunction openf, int glb);
struct luaL_Buffer
{
    byte* b;
    size_t size;
    size_t n;
    lua_State* L;
    byte[8192] initb;
}
extern(C) void luaL_buffinit(lua_State* L, luaL_Buffer* B);
extern(C) byte* luaL_prepbuffsize(luaL_Buffer* B, size_t sz);
extern(C) void luaL_addlstring(luaL_Buffer* B, byte* s, size_t l);
extern(C) void luaL_addstring(luaL_Buffer* B, byte* s);
extern(C) void luaL_addvalue(luaL_Buffer* B);
extern(C) void luaL_pushresult(luaL_Buffer* B);
extern(C) void luaL_pushresultsize(luaL_Buffer* B, size_t sz);
extern(C) byte* luaL_buffinitsize(lua_State* L, luaL_Buffer* B, size_t sz);
struct luaL_Stream
{
    FILE* f;
    lua_CFunction closef;
}
