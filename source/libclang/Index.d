// This source code was generated by regenerator
module libclang.index;
import libclang.cxstring;
import libclang.corecrt;
import libclang.vcruntime;
import libclang.cxerrorcode;
enum CINDEX_VERSION_MAJOR = 0;
enum CINDEX_VERSION_MINOR = 59;
alias CXIndex = void*;
struct CXTargetInfoImpl;
alias CXTargetInfo = CXTargetInfoImpl*;
struct CXTranslationUnitImpl;
alias CXTranslationUnit = CXTranslationUnitImpl*;
alias CXClientData = void*;
struct CXUnsavedFile
{
    const char* Filename;
    const char* Contents;
    uint Length;
}
enum CXAvailabilityKind
{
    _Available = 0x0,
    _Deprecated = 0x1,
    _NotAvailable = 0x2,
    _NotAccessible = 0x3,
}
struct CXVersion
{
    int Major;
    int Minor;
    int Subminor;
}
enum CXCursor_ExceptionSpecificationKind
{
    _None = 0x0,
    _DynamicNone = 0x1,
    _Dynamic = 0x2,
    _MSAny = 0x3,
    _BasicNoexcept = 0x4,
    _ComputedNoexcept = 0x5,
    _Unevaluated = 0x6,
    _Uninstantiated = 0x7,
    _Unparsed = 0x8,
    _NoThrow = 0x9,
}
enum CXGlobalOptFlags
{
    _None = 0x0,
    _ThreadBackgroundPriorityForIndexing = 0x1,
    _ThreadBackgroundPriorityForEditing = 0x2,
    _ThreadBackgroundPriorityForAll = 0x3,
}
alias CXFile = void*;
struct CXFileUniqueID
{
    ulong[3] data;
}
struct CXSourceLocation
{
    void*[2] ptr_data;
    uint int_data;
}
struct CXSourceRange
{
    void*[2] ptr_data;
    uint begin_int_data;
    uint end_int_data;
}
struct CXSourceRangeList
{
    uint count;
    CXSourceRange* ranges;
}
enum CXDiagnosticSeverity
{
    _Ignored = 0x0,
    _Note = 0x1,
    _Warning = 0x2,
    _Error = 0x3,
    _Fatal = 0x4,
}
alias CXDiagnostic = void*;
alias CXDiagnosticSet = void*;
enum CXLoadDiag_Error
{
    _None = 0x0,
    _Unknown = 0x1,
    _CannotLoad = 0x2,
    _InvalidFile = 0x3,
}
enum CXDiagnosticDisplayOptions
{
    _DisplaySourceLocation = 0x1,
    _DisplayColumn = 0x2,
    _DisplaySourceRanges = 0x4,
    _DisplayOption = 0x8,
    _DisplayCategoryId = 0x10,
    _DisplayCategoryName = 0x20,
}
enum CXTranslationUnit_Flags
{
    _None = 0x0,
    _DetailedPreprocessingRecord = 0x1,
    _Incomplete = 0x2,
    _PrecompiledPreamble = 0x4,
    _CacheCompletionResults = 0x8,
    _ForSerialization = 0x10,
    _CXXChainedPCH = 0x20,
    _SkipFunctionBodies = 0x40,
    _IncludeBriefCommentsInCodeCompletion = 0x80,
    _CreatePreambleOnFirstParse = 0x100,
    _KeepGoing = 0x200,
    _SingleFileParse = 0x400,
    _LimitSkipFunctionBodiesToPreamble = 0x800,
    _IncludeAttributedTypes = 0x1000,
    _VisitImplicitAttributes = 0x2000,
    _IgnoreNonErrorsFromIncludedFiles = 0x4000,
}
enum CXSaveTranslationUnit_Flags
{
    CXSaveTranslationUnit_None = 0x0,
}
enum CXSaveError
{
    _None = 0x0,
    _Unknown = 0x1,
    _TranslationErrors = 0x2,
    _InvalidTU = 0x3,
}
enum CXReparse_Flags
{
    CXReparse_None = 0x0,
}
enum CXTUResourceUsageKind
{
    _AST = 0x1,
    _Identifiers = 0x2,
    _Selectors = 0x3,
    _GlobalCompletionResults = 0x4,
    _SourceManagerContentCache = 0x5,
    _AST_SideTables = 0x6,
    _SourceManager_Membuffer_Malloc = 0x7,
    _SourceManager_Membuffer_MMap = 0x8,
    _ExternalASTSource_Membuffer_Malloc = 0x9,
    _ExternalASTSource_Membuffer_MMap = 0xa,
    _Preprocessor = 0xb,
    _PreprocessingRecord = 0xc,
    _SourceManager_DataStructures = 0xd,
    _Preprocessor_HeaderSearch = 0xe,
    _MEMORY_IN_BYTES_BEGIN = 0x1,
    _MEMORY_IN_BYTES_END = 0xe,
    _First = 0x1,
    _Last = 0xe,
}
struct CXTUResourceUsageEntry
{
    CXTUResourceUsageKind kind;
    uint amount;
}
struct CXTUResourceUsage
{
    void* data;
    uint numEntries;
    CXTUResourceUsageEntry* entries;
}
enum CXCursorKind
{
    _UnexposedDecl = 0x1,
    _StructDecl = 0x2,
    _UnionDecl = 0x3,
    _ClassDecl = 0x4,
    _EnumDecl = 0x5,
    _FieldDecl = 0x6,
    _EnumConstantDecl = 0x7,
    _FunctionDecl = 0x8,
    _VarDecl = 0x9,
    _ParmDecl = 0xa,
    _ObjCInterfaceDecl = 0xb,
    _ObjCCategoryDecl = 0xc,
    _ObjCProtocolDecl = 0xd,
    _ObjCPropertyDecl = 0xe,
    _ObjCIvarDecl = 0xf,
    _ObjCInstanceMethodDecl = 0x10,
    _ObjCClassMethodDecl = 0x11,
    _ObjCImplementationDecl = 0x12,
    _ObjCCategoryImplDecl = 0x13,
    _TypedefDecl = 0x14,
    _CXXMethod = 0x15,
    _Namespace = 0x16,
    _LinkageSpec = 0x17,
    _Constructor = 0x18,
    _Destructor = 0x19,
    _ConversionFunction = 0x1a,
    _TemplateTypeParameter = 0x1b,
    _NonTypeTemplateParameter = 0x1c,
    _TemplateTemplateParameter = 0x1d,
    _FunctionTemplate = 0x1e,
    _ClassTemplate = 0x1f,
    _ClassTemplatePartialSpecialization = 0x20,
    _NamespaceAlias = 0x21,
    _UsingDirective = 0x22,
    _UsingDeclaration = 0x23,
    _TypeAliasDecl = 0x24,
    _ObjCSynthesizeDecl = 0x25,
    _ObjCDynamicDecl = 0x26,
    _CXXAccessSpecifier = 0x27,
    _FirstDecl = 0x1,
    _LastDecl = 0x27,
    _FirstRef = 0x28,
    _ObjCSuperClassRef = 0x28,
    _ObjCProtocolRef = 0x29,
    _ObjCClassRef = 0x2a,
    _TypeRef = 0x2b,
    _CXXBaseSpecifier = 0x2c,
    _TemplateRef = 0x2d,
    _NamespaceRef = 0x2e,
    _MemberRef = 0x2f,
    _LabelRef = 0x30,
    _OverloadedDeclRef = 0x31,
    _VariableRef = 0x32,
    _LastRef = 0x32,
    _FirstInvalid = 0x46,
    _InvalidFile = 0x46,
    _NoDeclFound = 0x47,
    _NotImplemented = 0x48,
    _InvalidCode = 0x49,
    _LastInvalid = 0x49,
    _FirstExpr = 0x64,
    _UnexposedExpr = 0x64,
    _DeclRefExpr = 0x65,
    _MemberRefExpr = 0x66,
    _CallExpr = 0x67,
    _ObjCMessageExpr = 0x68,
    _BlockExpr = 0x69,
    _IntegerLiteral = 0x6a,
    _FloatingLiteral = 0x6b,
    _ImaginaryLiteral = 0x6c,
    _StringLiteral = 0x6d,
    _CharacterLiteral = 0x6e,
    _ParenExpr = 0x6f,
    _UnaryOperator = 0x70,
    _ArraySubscriptExpr = 0x71,
    _BinaryOperator = 0x72,
    _CompoundAssignOperator = 0x73,
    _ConditionalOperator = 0x74,
    _CStyleCastExpr = 0x75,
    _CompoundLiteralExpr = 0x76,
    _InitListExpr = 0x77,
    _AddrLabelExpr = 0x78,
    _StmtExpr = 0x79,
    _GenericSelectionExpr = 0x7a,
    _GNUNullExpr = 0x7b,
    _CXXStaticCastExpr = 0x7c,
    _CXXDynamicCastExpr = 0x7d,
    _CXXReinterpretCastExpr = 0x7e,
    _CXXConstCastExpr = 0x7f,
    _CXXFunctionalCastExpr = 0x80,
    _CXXTypeidExpr = 0x81,
    _CXXBoolLiteralExpr = 0x82,
    _CXXNullPtrLiteralExpr = 0x83,
    _CXXThisExpr = 0x84,
    _CXXThrowExpr = 0x85,
    _CXXNewExpr = 0x86,
    _CXXDeleteExpr = 0x87,
    _UnaryExpr = 0x88,
    _ObjCStringLiteral = 0x89,
    _ObjCEncodeExpr = 0x8a,
    _ObjCSelectorExpr = 0x8b,
    _ObjCProtocolExpr = 0x8c,
    _ObjCBridgedCastExpr = 0x8d,
    _PackExpansionExpr = 0x8e,
    _SizeOfPackExpr = 0x8f,
    _LambdaExpr = 0x90,
    _ObjCBoolLiteralExpr = 0x91,
    _ObjCSelfExpr = 0x92,
    _OMPArraySectionExpr = 0x93,
    _ObjCAvailabilityCheckExpr = 0x94,
    _FixedPointLiteral = 0x95,
    _LastExpr = 0x95,
    _FirstStmt = 0xc8,
    _UnexposedStmt = 0xc8,
    _LabelStmt = 0xc9,
    _CompoundStmt = 0xca,
    _CaseStmt = 0xcb,
    _DefaultStmt = 0xcc,
    _IfStmt = 0xcd,
    _SwitchStmt = 0xce,
    _WhileStmt = 0xcf,
    _DoStmt = 0xd0,
    _ForStmt = 0xd1,
    _GotoStmt = 0xd2,
    _IndirectGotoStmt = 0xd3,
    _ContinueStmt = 0xd4,
    _BreakStmt = 0xd5,
    _ReturnStmt = 0xd6,
    _GCCAsmStmt = 0xd7,
    _AsmStmt = 0xd7,
    _ObjCAtTryStmt = 0xd8,
    _ObjCAtCatchStmt = 0xd9,
    _ObjCAtFinallyStmt = 0xda,
    _ObjCAtThrowStmt = 0xdb,
    _ObjCAtSynchronizedStmt = 0xdc,
    _ObjCAutoreleasePoolStmt = 0xdd,
    _ObjCForCollectionStmt = 0xde,
    _CXXCatchStmt = 0xdf,
    _CXXTryStmt = 0xe0,
    _CXXForRangeStmt = 0xe1,
    _SEHTryStmt = 0xe2,
    _SEHExceptStmt = 0xe3,
    _SEHFinallyStmt = 0xe4,
    _MSAsmStmt = 0xe5,
    _NullStmt = 0xe6,
    _DeclStmt = 0xe7,
    _OMPParallelDirective = 0xe8,
    _OMPSimdDirective = 0xe9,
    _OMPForDirective = 0xea,
    _OMPSectionsDirective = 0xeb,
    _OMPSectionDirective = 0xec,
    _OMPSingleDirective = 0xed,
    _OMPParallelForDirective = 0xee,
    _OMPParallelSectionsDirective = 0xef,
    _OMPTaskDirective = 0xf0,
    _OMPMasterDirective = 0xf1,
    _OMPCriticalDirective = 0xf2,
    _OMPTaskyieldDirective = 0xf3,
    _OMPBarrierDirective = 0xf4,
    _OMPTaskwaitDirective = 0xf5,
    _OMPFlushDirective = 0xf6,
    _SEHLeaveStmt = 0xf7,
    _OMPOrderedDirective = 0xf8,
    _OMPAtomicDirective = 0xf9,
    _OMPForSimdDirective = 0xfa,
    _OMPParallelForSimdDirective = 0xfb,
    _OMPTargetDirective = 0xfc,
    _OMPTeamsDirective = 0xfd,
    _OMPTaskgroupDirective = 0xfe,
    _OMPCancellationPointDirective = 0xff,
    _OMPCancelDirective = 0x100,
    _OMPTargetDataDirective = 0x101,
    _OMPTaskLoopDirective = 0x102,
    _OMPTaskLoopSimdDirective = 0x103,
    _OMPDistributeDirective = 0x104,
    _OMPTargetEnterDataDirective = 0x105,
    _OMPTargetExitDataDirective = 0x106,
    _OMPTargetParallelDirective = 0x107,
    _OMPTargetParallelForDirective = 0x108,
    _OMPTargetUpdateDirective = 0x109,
    _OMPDistributeParallelForDirective = 0x10a,
    _OMPDistributeParallelForSimdDirective = 0x10b,
    _OMPDistributeSimdDirective = 0x10c,
    _OMPTargetParallelForSimdDirective = 0x10d,
    _OMPTargetSimdDirective = 0x10e,
    _OMPTeamsDistributeDirective = 0x10f,
    _OMPTeamsDistributeSimdDirective = 0x110,
    _OMPTeamsDistributeParallelForSimdDirective = 0x111,
    _OMPTeamsDistributeParallelForDirective = 0x112,
    _OMPTargetTeamsDirective = 0x113,
    _OMPTargetTeamsDistributeDirective = 0x114,
    _OMPTargetTeamsDistributeParallelForDirective = 0x115,
    _OMPTargetTeamsDistributeParallelForSimdDirective = 0x116,
    _OMPTargetTeamsDistributeSimdDirective = 0x117,
    _BuiltinBitCastExpr = 0x118,
    _LastStmt = 0x118,
    _TranslationUnit = 0x12c,
    _FirstAttr = 0x190,
    _UnexposedAttr = 0x190,
    _IBActionAttr = 0x191,
    _IBOutletAttr = 0x192,
    _IBOutletCollectionAttr = 0x193,
    _CXXFinalAttr = 0x194,
    _CXXOverrideAttr = 0x195,
    _AnnotateAttr = 0x196,
    _AsmLabelAttr = 0x197,
    _PackedAttr = 0x198,
    _PureAttr = 0x199,
    _ConstAttr = 0x19a,
    _NoDuplicateAttr = 0x19b,
    _CUDAConstantAttr = 0x19c,
    _CUDADeviceAttr = 0x19d,
    _CUDAGlobalAttr = 0x19e,
    _CUDAHostAttr = 0x19f,
    _CUDASharedAttr = 0x1a0,
    _VisibilityAttr = 0x1a1,
    _DLLExport = 0x1a2,
    _DLLImport = 0x1a3,
    _NSReturnsRetained = 0x1a4,
    _NSReturnsNotRetained = 0x1a5,
    _NSReturnsAutoreleased = 0x1a6,
    _NSConsumesSelf = 0x1a7,
    _NSConsumed = 0x1a8,
    _ObjCException = 0x1a9,
    _ObjCNSObject = 0x1aa,
    _ObjCIndependentClass = 0x1ab,
    _ObjCPreciseLifetime = 0x1ac,
    _ObjCReturnsInnerPointer = 0x1ad,
    _ObjCRequiresSuper = 0x1ae,
    _ObjCRootClass = 0x1af,
    _ObjCSubclassingRestricted = 0x1b0,
    _ObjCExplicitProtocolImpl = 0x1b1,
    _ObjCDesignatedInitializer = 0x1b2,
    _ObjCRuntimeVisible = 0x1b3,
    _ObjCBoxable = 0x1b4,
    _FlagEnum = 0x1b5,
    _ConvergentAttr = 0x1b6,
    _WarnUnusedAttr = 0x1b7,
    _WarnUnusedResultAttr = 0x1b8,
    _AlignedAttr = 0x1b9,
    _LastAttr = 0x1b9,
    _PreprocessingDirective = 0x1f4,
    _MacroDefinition = 0x1f5,
    _MacroExpansion = 0x1f6,
    _MacroInstantiation = 0x1f6,
    _InclusionDirective = 0x1f7,
    _FirstPreprocessing = 0x1f4,
    _LastPreprocessing = 0x1f7,
    _ModuleImportDecl = 0x258,
    _TypeAliasTemplateDecl = 0x259,
    _StaticAssert = 0x25a,
    _FriendDecl = 0x25b,
    _FirstExtraDecl = 0x258,
    _LastExtraDecl = 0x25b,
    _OverloadCandidate = 0x2bc,
}
struct CXCursor
{
    CXCursorKind kind;
    int xdata;
    void*[3] data;
}
enum CXLinkageKind
{
    _Invalid = 0x0,
    _NoLinkage = 0x1,
    _Internal = 0x2,
    _UniqueExternal = 0x3,
    _External = 0x4,
}
enum CXVisibilityKind
{
    _Invalid = 0x0,
    _Hidden = 0x1,
    _Protected = 0x2,
    _Default = 0x3,
}
struct CXPlatformAvailability
{
    CXString Platform;
    CXVersion Introduced;
    CXVersion Deprecated;
    CXVersion Obsoleted;
    int Unavailable;
    CXString Message;
}
enum CXLanguageKind
{
    _Invalid = 0x0,
    _C = 0x1,
    _ObjC = 0x2,
    _CPlusPlus = 0x3,
}
enum CXTLSKind
{
    _None = 0x0,
    _Dynamic = 0x1,
    _Static = 0x2,
}
struct CXCursorSetImpl;
alias CXCursorSet = CXCursorSetImpl*;
enum CXTypeKind
{
    _Invalid = 0x0,
    _Unexposed = 0x1,
    _Void = 0x2,
    _Bool = 0x3,
    _Char_U = 0x4,
    _UChar = 0x5,
    _Char16 = 0x6,
    _Char32 = 0x7,
    _UShort = 0x8,
    _UInt = 0x9,
    _ULong = 0xa,
    _ULongLong = 0xb,
    _UInt128 = 0xc,
    _Char_S = 0xd,
    _SChar = 0xe,
    _WChar = 0xf,
    _Short = 0x10,
    _Int = 0x11,
    _Long = 0x12,
    _LongLong = 0x13,
    _Int128 = 0x14,
    _Float = 0x15,
    _Double = 0x16,
    _LongDouble = 0x17,
    _NullPtr = 0x18,
    _Overload = 0x19,
    _Dependent = 0x1a,
    _ObjCId = 0x1b,
    _ObjCClass = 0x1c,
    _ObjCSel = 0x1d,
    _Float128 = 0x1e,
    _Half = 0x1f,
    _Float16 = 0x20,
    _ShortAccum = 0x21,
    _Accum = 0x22,
    _LongAccum = 0x23,
    _UShortAccum = 0x24,
    _UAccum = 0x25,
    _ULongAccum = 0x26,
    _FirstBuiltin = 0x2,
    _LastBuiltin = 0x26,
    _Complex = 0x64,
    _Pointer = 0x65,
    _BlockPointer = 0x66,
    _LValueReference = 0x67,
    _RValueReference = 0x68,
    _Record = 0x69,
    _Enum = 0x6a,
    _Typedef = 0x6b,
    _ObjCInterface = 0x6c,
    _ObjCObjectPointer = 0x6d,
    _FunctionNoProto = 0x6e,
    _FunctionProto = 0x6f,
    _ConstantArray = 0x70,
    _Vector = 0x71,
    _IncompleteArray = 0x72,
    _VariableArray = 0x73,
    _DependentSizedArray = 0x74,
    _MemberPointer = 0x75,
    _Auto = 0x76,
    _Elaborated = 0x77,
    _Pipe = 0x78,
    _OCLImage1dRO = 0x79,
    _OCLImage1dArrayRO = 0x7a,
    _OCLImage1dBufferRO = 0x7b,
    _OCLImage2dRO = 0x7c,
    _OCLImage2dArrayRO = 0x7d,
    _OCLImage2dDepthRO = 0x7e,
    _OCLImage2dArrayDepthRO = 0x7f,
    _OCLImage2dMSAARO = 0x80,
    _OCLImage2dArrayMSAARO = 0x81,
    _OCLImage2dMSAADepthRO = 0x82,
    _OCLImage2dArrayMSAADepthRO = 0x83,
    _OCLImage3dRO = 0x84,
    _OCLImage1dWO = 0x85,
    _OCLImage1dArrayWO = 0x86,
    _OCLImage1dBufferWO = 0x87,
    _OCLImage2dWO = 0x88,
    _OCLImage2dArrayWO = 0x89,
    _OCLImage2dDepthWO = 0x8a,
    _OCLImage2dArrayDepthWO = 0x8b,
    _OCLImage2dMSAAWO = 0x8c,
    _OCLImage2dArrayMSAAWO = 0x8d,
    _OCLImage2dMSAADepthWO = 0x8e,
    _OCLImage2dArrayMSAADepthWO = 0x8f,
    _OCLImage3dWO = 0x90,
    _OCLImage1dRW = 0x91,
    _OCLImage1dArrayRW = 0x92,
    _OCLImage1dBufferRW = 0x93,
    _OCLImage2dRW = 0x94,
    _OCLImage2dArrayRW = 0x95,
    _OCLImage2dDepthRW = 0x96,
    _OCLImage2dArrayDepthRW = 0x97,
    _OCLImage2dMSAARW = 0x98,
    _OCLImage2dArrayMSAARW = 0x99,
    _OCLImage2dMSAADepthRW = 0x9a,
    _OCLImage2dArrayMSAADepthRW = 0x9b,
    _OCLImage3dRW = 0x9c,
    _OCLSampler = 0x9d,
    _OCLEvent = 0x9e,
    _OCLQueue = 0x9f,
    _OCLReserveID = 0xa0,
    _ObjCObject = 0xa1,
    _ObjCTypeParam = 0xa2,
    _Attributed = 0xa3,
    _OCLIntelSubgroupAVCMcePayload = 0xa4,
    _OCLIntelSubgroupAVCImePayload = 0xa5,
    _OCLIntelSubgroupAVCRefPayload = 0xa6,
    _OCLIntelSubgroupAVCSicPayload = 0xa7,
    _OCLIntelSubgroupAVCMceResult = 0xa8,
    _OCLIntelSubgroupAVCImeResult = 0xa9,
    _OCLIntelSubgroupAVCRefResult = 0xaa,
    _OCLIntelSubgroupAVCSicResult = 0xab,
    _OCLIntelSubgroupAVCImeResultSingleRefStreamout = 0xac,
    _OCLIntelSubgroupAVCImeResultDualRefStreamout = 0xad,
    _OCLIntelSubgroupAVCImeSingleRefStreamin = 0xae,
    _OCLIntelSubgroupAVCImeDualRefStreamin = 0xaf,
    _ExtVector = 0xb0,
}
enum CXCallingConv
{
    _Default = 0x0,
    _C = 0x1,
    _X86StdCall = 0x2,
    _X86FastCall = 0x3,
    _X86ThisCall = 0x4,
    _X86Pascal = 0x5,
    _AAPCS = 0x6,
    _AAPCS_VFP = 0x7,
    _X86RegCall = 0x8,
    _IntelOclBicc = 0x9,
    _Win64 = 0xa,
    _X86_64Win64 = 0xa,
    _X86_64SysV = 0xb,
    _X86VectorCall = 0xc,
    _Swift = 0xd,
    _PreserveMost = 0xe,
    _PreserveAll = 0xf,
    _AArch64VectorCall = 0x10,
    _Invalid = 0x64,
    _Unexposed = 0xc8,
}
struct CXType
{
    CXTypeKind kind;
    void*[2] data;
}
enum CXTemplateArgumentKind
{
    _Null = 0x0,
    _Type = 0x1,
    _Declaration = 0x2,
    _NullPtr = 0x3,
    _Integral = 0x4,
    _Template = 0x5,
    _TemplateExpansion = 0x6,
    _Expression = 0x7,
    _Pack = 0x8,
    _Invalid = 0x9,
}
enum CXTypeNullabilityKind
{
    _NonNull = 0x0,
    _Nullable = 0x1,
    _Unspecified = 0x2,
    _Invalid = 0x3,
}
enum CXTypeLayoutError
{
    _Invalid = 0xffffffff,
    _Incomplete = 0xfffffffe,
    _Dependent = 0xfffffffd,
    _NotConstantSize = 0xfffffffc,
    _InvalidFieldName = 0xfffffffb,
    _Undeduced = 0xfffffffa,
}
enum CXRefQualifierKind
{
    _None = 0x0,
    _LValue = 0x1,
    _RValue = 0x2,
}
enum CX_CXXAccessSpecifier
{
    _CXXInvalidAccessSpecifier = 0x0,
    _CXXPublic = 0x1,
    _CXXProtected = 0x2,
    _CXXPrivate = 0x3,
}
enum CX_StorageClass
{
    _Invalid = 0x0,
    _None = 0x1,
    _Extern = 0x2,
    _Static = 0x3,
    _PrivateExtern = 0x4,
    _OpenCLWorkGroupLocal = 0x5,
    _Auto = 0x6,
    _Register = 0x7,
}
enum CXChildVisitResult
{
    _Break = 0x0,
    _Continue = 0x1,
    _Recurse = 0x2,
}
alias CXCursorVisitor = void*;
alias CXPrintingPolicy = void*;
enum CXPrintingPolicyProperty
{
    _Indentation = 0x0,
    _SuppressSpecifiers = 0x1,
    _SuppressTagKeyword = 0x2,
    _IncludeTagDefinition = 0x3,
    _SuppressScope = 0x4,
    _SuppressUnwrittenScope = 0x5,
    _SuppressInitializers = 0x6,
    _ConstantArraySizeAsWritten = 0x7,
    _AnonymousTagLocations = 0x8,
    _SuppressStrongLifetime = 0x9,
    _SuppressLifetimeQualifiers = 0xa,
    _SuppressTemplateArgsInCXXConstructors = 0xb,
    _Bool = 0xc,
    _Restrict = 0xd,
    _Alignof = 0xe,
    _UnderscoreAlignof = 0xf,
    _UseVoidForZeroParams = 0x10,
    _TerseOutput = 0x11,
    _PolishForDeclaration = 0x12,
    _Half = 0x13,
    _MSWChar = 0x14,
    _IncludeNewlines = 0x15,
    _MSVCFormatting = 0x16,
    _ConstantsAsWritten = 0x17,
    _SuppressImplicitBase = 0x18,
    _FullyQualifiedName = 0x19,
    _LastProperty = 0x19,
}
enum CXObjCPropertyAttrKind
{
    _noattr = 0x0,
    _readonly = 0x1,
    _getter = 0x2,
    _assign = 0x4,
    _readwrite = 0x8,
    _retain = 0x10,
    _copy = 0x20,
    _nonatomic = 0x40,
    _setter = 0x80,
    _atomic = 0x100,
    _weak = 0x200,
    _strong = 0x400,
    _unsafe_unretained = 0x800,
    _class = 0x1000,
}
enum CXObjCDeclQualifierKind
{
    _None = 0x0,
    _In = 0x1,
    _Inout = 0x2,
    _Out = 0x4,
    _Bycopy = 0x8,
    _Byref = 0x10,
    _Oneway = 0x20,
}
alias CXModule = void*;
enum CXNameRefFlags
{
    _WantQualifier = 0x1,
    _WantTemplateArgs = 0x2,
    _WantSinglePiece = 0x4,
}
enum CXTokenKind
{
    _Punctuation = 0x0,
    _Keyword = 0x1,
    _Identifier = 0x2,
    _Literal = 0x3,
    _Comment = 0x4,
}
struct CXToken
{
    uint[4] int_data;
    void* ptr_data;
}
alias CXCompletionString = void*;
struct CXCompletionResult
{
    CXCursorKind CursorKind;
    CXCompletionString CompletionString;
}
enum CXCompletionChunkKind
{
    _Optional = 0x0,
    _TypedText = 0x1,
    _Text = 0x2,
    _Placeholder = 0x3,
    _Informative = 0x4,
    _CurrentParameter = 0x5,
    _LeftParen = 0x6,
    _RightParen = 0x7,
    _LeftBracket = 0x8,
    _RightBracket = 0x9,
    _LeftBrace = 0xa,
    _RightBrace = 0xb,
    _LeftAngle = 0xc,
    _RightAngle = 0xd,
    _Comma = 0xe,
    _ResultType = 0xf,
    _Colon = 0x10,
    _SemiColon = 0x11,
    _Equal = 0x12,
    _HorizontalSpace = 0x13,
    _VerticalSpace = 0x14,
}
struct CXCodeCompleteResults
{
    CXCompletionResult* Results;
    uint NumResults;
}
enum CXCodeComplete_Flags
{
    _IncludeMacros = 0x1,
    _IncludeCodePatterns = 0x2,
    _IncludeBriefComments = 0x4,
    _SkipPreamble = 0x8,
    _IncludeCompletionsWithFixIts = 0x10,
}
enum CXCompletionContext
{
    _Unexposed = 0x0,
    _AnyType = 0x1,
    _AnyValue = 0x2,
    _ObjCObjectValue = 0x4,
    _ObjCSelectorValue = 0x8,
    _CXXClassTypeValue = 0x10,
    _DotMemberAccess = 0x20,
    _ArrowMemberAccess = 0x40,
    _ObjCPropertyAccess = 0x80,
    _EnumTag = 0x100,
    _UnionTag = 0x200,
    _StructTag = 0x400,
    _ClassTag = 0x800,
    _Namespace = 0x1000,
    _NestedNameSpecifier = 0x2000,
    _ObjCInterface = 0x4000,
    _ObjCProtocol = 0x8000,
    _ObjCCategory = 0x10000,
    _ObjCInstanceMessage = 0x20000,
    _ObjCClassMessage = 0x40000,
    _ObjCSelectorName = 0x80000,
    _MacroName = 0x100000,
    _NaturalLanguage = 0x200000,
    _IncludedFile = 0x400000,
    _Unknown = 0x7fffff,
}
alias CXInclusionVisitor = void*;
enum CXEvalResultKind
{
    _Int = 0x1,
    _Float = 0x2,
    _ObjCStrLiteral = 0x3,
    _StrLiteral = 0x4,
    _CFStr = 0x5,
    _Other = 0x6,
    _UnExposed = 0x0,
}
alias CXEvalResult = void*;
alias CXRemapping = void*;
enum CXVisitorResult
{
    _Break = 0x0,
    _Continue = 0x1,
}
struct CXCursorAndRangeVisitor
{
    void* context;
    void* visit;
}
enum CXResult
{
    _Success = 0x0,
    _Invalid = 0x1,
    _VisitBreak = 0x2,
}
alias CXIdxClientFile = void*;
alias CXIdxClientEntity = void*;
alias CXIdxClientContainer = void*;
alias CXIdxClientASTFile = void*;
struct CXIdxLoc
{
    void*[2] ptr_data;
    uint int_data;
}
struct CXIdxIncludedFileInfo
{
    CXIdxLoc hashLoc;
    const char* filename;
    CXFile file;
    int isImport;
    int isAngled;
    int isModuleImport;
}
struct CXIdxImportedASTFileInfo
{
    CXFile file;
    CXModule _module;
    CXIdxLoc loc;
    int isImplicit;
}
enum CXIdxEntityKind
{
    _Unexposed = 0x0,
    _Typedef = 0x1,
    _Function = 0x2,
    _Variable = 0x3,
    _Field = 0x4,
    _EnumConstant = 0x5,
    _ObjCClass = 0x6,
    _ObjCProtocol = 0x7,
    _ObjCCategory = 0x8,
    _ObjCInstanceMethod = 0x9,
    _ObjCClassMethod = 0xa,
    _ObjCProperty = 0xb,
    _ObjCIvar = 0xc,
    _Enum = 0xd,
    _Struct = 0xe,
    _Union = 0xf,
    _CXXClass = 0x10,
    _CXXNamespace = 0x11,
    _CXXNamespaceAlias = 0x12,
    _CXXStaticVariable = 0x13,
    _CXXStaticMethod = 0x14,
    _CXXInstanceMethod = 0x15,
    _CXXConstructor = 0x16,
    _CXXDestructor = 0x17,
    _CXXConversionFunction = 0x18,
    _CXXTypeAlias = 0x19,
    _CXXInterface = 0x1a,
}
enum CXIdxEntityLanguage
{
    _None = 0x0,
    _C = 0x1,
    _ObjC = 0x2,
    _CXX = 0x3,
    _Swift = 0x4,
}
enum CXIdxEntityCXXTemplateKind
{
    _NonTemplate = 0x0,
    _Template = 0x1,
    _TemplatePartialSpecialization = 0x2,
    _TemplateSpecialization = 0x3,
}
enum CXIdxAttrKind
{
    _Unexposed = 0x0,
    _IBAction = 0x1,
    _IBOutlet = 0x2,
    _IBOutletCollection = 0x3,
}
struct CXIdxAttrInfo
{
    CXIdxAttrKind kind;
    CXCursor cursor;
    CXIdxLoc loc;
}
struct CXIdxEntityInfo
{
    CXIdxEntityKind kind;
    CXIdxEntityCXXTemplateKind templateKind;
    CXIdxEntityLanguage lang;
    const char* name;
    const char* USR;
    CXCursor cursor;
    const CXIdxAttrInfo** attributes;
    uint numAttributes;
}
struct CXIdxContainerInfo
{
    CXCursor cursor;
}
struct CXIdxIBOutletCollectionAttrInfo
{
    const CXIdxAttrInfo* attrInfo;
    const CXIdxEntityInfo* objcClass;
    CXCursor classCursor;
    CXIdxLoc classLoc;
}
enum CXIdxDeclInfoFlags
{
    CXIdxDeclFlag_Skipped = 0x1,
}
struct CXIdxDeclInfo
{
    const CXIdxEntityInfo* entityInfo;
    CXCursor cursor;
    CXIdxLoc loc;
    const CXIdxContainerInfo* semanticContainer;
    const CXIdxContainerInfo* lexicalContainer;
    int isRedeclaration;
    int isDefinition;
    int isContainer;
    const CXIdxContainerInfo* declAsContainer;
    int isImplicit;
    const CXIdxAttrInfo** attributes;
    uint numAttributes;
    uint flags;
}
enum CXIdxObjCContainerKind
{
    _ForwardRef = 0x0,
    _Interface = 0x1,
    _Implementation = 0x2,
}
struct CXIdxObjCContainerDeclInfo
{
    const CXIdxDeclInfo* declInfo;
    CXIdxObjCContainerKind kind;
}
struct CXIdxBaseClassInfo
{
    const CXIdxEntityInfo* base;
    CXCursor cursor;
    CXIdxLoc loc;
}
struct CXIdxObjCProtocolRefInfo
{
    const CXIdxEntityInfo* protocol;
    CXCursor cursor;
    CXIdxLoc loc;
}
struct CXIdxObjCProtocolRefListInfo
{
    const CXIdxObjCProtocolRefInfo** protocols;
    uint numProtocols;
}
struct CXIdxObjCInterfaceDeclInfo
{
    const CXIdxObjCContainerDeclInfo* containerInfo;
    const CXIdxBaseClassInfo* superInfo;
    const CXIdxObjCProtocolRefListInfo* protocols;
}
struct CXIdxObjCCategoryDeclInfo
{
    const CXIdxObjCContainerDeclInfo* containerInfo;
    const CXIdxEntityInfo* objcClass;
    CXCursor classCursor;
    CXIdxLoc classLoc;
    const CXIdxObjCProtocolRefListInfo* protocols;
}
struct CXIdxObjCPropertyDeclInfo
{
    const CXIdxDeclInfo* declInfo;
    const CXIdxEntityInfo* getter;
    const CXIdxEntityInfo* setter;
}
struct CXIdxCXXClassDeclInfo
{
    const CXIdxDeclInfo* declInfo;
    const CXIdxBaseClassInfo** bases;
    uint numBases;
}
enum CXIdxEntityRefKind
{
    _Direct = 0x1,
    _Implicit = 0x2,
}
enum CXSymbolRole
{
    _None = 0x0,
    _Declaration = 0x1,
    _Definition = 0x2,
    _Reference = 0x4,
    _Read = 0x8,
    _Write = 0x10,
    _Call = 0x20,
    _Dynamic = 0x40,
    _AddressOf = 0x80,
    _Implicit = 0x100,
}
struct CXIdxEntityRefInfo
{
    CXIdxEntityRefKind kind;
    CXCursor cursor;
    CXIdxLoc loc;
    const CXIdxEntityInfo* referencedEntity;
    const CXIdxEntityInfo* parentEntity;
    const CXIdxContainerInfo* container;
    CXSymbolRole role;
}
struct IndexerCallbacks
{
    void* abortQuery;
    void* diagnostic;
    void* enteredMainFile;
    void* ppIncludedFile;
    void* importedASTFile;
    void* startedTranslationUnit;
    void* indexDeclaration;
    void* indexEntityReference;
}
alias CXIndexAction = void*;
enum CXIndexOptFlags
{
    _None = 0x0,
    _SuppressRedundantRefs = 0x1,
    _IndexFunctionLocalSymbols = 0x2,
    _IndexImplicitTemplateInstantiations = 0x4,
    _SuppressWarnings = 0x8,
    _SkipParsedBodiesInSession = 0x10,
}
alias CXFieldVisitor = void*;
extern(C++) {
extern(C) CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics);
extern(C) uint clang_Cursor_isVariadic(CXCursor C);
extern(C) uint clang_Cursor_isObjCOptional(CXCursor C);
extern(C) uint clang_Cursor_getObjCDeclQualifiers(CXCursor C);
extern(C) uint clang_Cursor_isExternalSymbol(CXCursor C, CXString* language, CXString* definedIn, uint* isGenerated);
extern(C) CXString clang_Cursor_getRawCommentText(CXCursor C);
extern(C) CXSourceRange clang_Cursor_getCommentRange(CXCursor C);
extern(C) CXString clang_Cursor_getBriefCommentText(CXCursor C);
extern(C) CXString clang_Cursor_getMangling(CXCursor );
extern(C) CXString clang_Cursor_getObjCPropertySetterName(CXCursor C);
extern(C) uint clang_Cursor_getObjCPropertyAttributes(CXCursor C, uint reserved);
extern(C) uint clang_isCursorDefinition(CXCursor );
extern(C) CXCursor clang_getCursorDefinition(CXCursor );
extern(C) CXString clang_Cursor_getObjCPropertyGetterName(CXCursor C);
extern(C) CXCursor clang_getCanonicalCursor(CXCursor );
extern(C) int clang_Cursor_isDynamicCall(CXCursor C);
extern(C) int clang_Cursor_getObjCSelectorIndex(CXCursor );
extern(C) CXType clang_Cursor_getReceiverType(CXCursor C);
extern(C) CXCursor clang_getCursorReferenced(CXCursor );
extern(C) CXStringSet* clang_Cursor_getCXXManglings(CXCursor );
extern(C) CXModule clang_Cursor_getModule(CXCursor C);
extern(C) uint clang_CXXConstructor_isMoveConstructor(CXCursor C);
extern(C) uint clang_CXXConstructor_isDefaultConstructor(CXCursor C);
extern(C) uint clang_CXXConstructor_isCopyConstructor(CXCursor C);
extern(C) uint clang_CXXField_isMutable(CXCursor C);
extern(C) uint clang_CXXMethod_isPureVirtual(CXCursor C);
extern(C) uint clang_CXXMethod_isDefaulted(CXCursor C);
extern(C) uint clang_CXXMethod_isStatic(CXCursor C);
extern(C) CXStringSet* clang_Cursor_getObjCManglings(CXCursor );
extern(C) uint clang_CXXConstructor_isConvertingConstructor(CXCursor C);
extern(C) uint clang_Module_getNumTopLevelHeaders(CXTranslationUnit , CXModule Module);
extern(C) CXFile clang_Module_getASTFile(CXModule Module);
extern(C) CXModule clang_getModuleForFile(CXTranslationUnit , CXFile );
extern(C) CXFile clang_Module_getTopLevelHeader(CXTranslationUnit , CXModule Module, uint Index);
extern(C) CXModule clang_Module_getParent(CXModule Module);
extern(C) CXString clang_Module_getFullName(CXModule Module);
extern(C) CXString clang_Module_getName(CXModule Module);
extern(C) int clang_Module_isSystem(CXModule Module);
extern(C) uint clang_CXXMethod_isVirtual(CXCursor C);
extern(C) CXString clang_getCursorDisplayName(CXCursor );
extern(C) void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy);
extern(C) uint clang_Cursor_isAnonymousRecordDecl(CXCursor C);
extern(C) uint clang_Cursor_isAnonymous(CXCursor C);
extern(C) long clang_Cursor_getOffsetOfField(CXCursor C);
extern(C) uint clang_Cursor_isInlineNamespace(CXCursor C);
extern(C) CXType clang_Type_getTemplateArgumentAsType(CXType T, uint i);
extern(C) int clang_Type_getNumTemplateArguments(CXType T);
extern(C) CXRefQualifierKind clang_Type_getCXXRefQualifier(CXType T);
extern(C) uint clang_Cursor_isBitField(CXCursor C);
extern(C) CXType clang_Type_getModifiedType(CXType T);
extern(C) long clang_Type_getSizeOf(CXType T);
extern(C) CXType clang_Type_getNamedType(CXType T);
extern(C) long clang_getArraySize(CXType T);
extern(C) long clang_Type_getOffsetOf(CXType T, const char* S);
extern(C) uint clang_Type_isTransparentTagTypedef(CXType T);
extern(C) long clang_Type_getAlignOf(CXType T);
extern(C) CXTypeNullabilityKind clang_Type_getNullability(CXType T);
extern(C) CXType clang_Type_getClassType(CXType T);
extern(C) CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy);
extern(C) uint clang_isVirtualBase(CXCursor );
extern(C) CX_StorageClass clang_Cursor_getStorageClass(CXCursor );
extern(C) CXString clang_getCursorSpelling(CXCursor );
extern(C) CXString clang_constructUSR_ObjCProperty(const char* property, CXString classUSR);
extern(C) CXString clang_constructUSR_ObjCMethod(const char* name, uint isInstanceMethod, CXString classUSR);
extern(C) CXSourceRange clang_Cursor_getSpellingNameRange(CXCursor , uint pieceIndex, uint options);
extern(C) void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, CXPrintingPolicyProperty Property, uint Value);
extern(C) uint clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, CXPrintingPolicyProperty Property);
extern(C) CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor );
extern(C) CX_CXXAccessSpecifier clang_getCXXAccessSpecifier(CXCursor );
extern(C) CXString clang_constructUSR_ObjCIvar(const char* name, CXString classUSR);
extern(C) CXString clang_constructUSR_ObjCCategory(const char* class_name, const char* category_name);
extern(C) CXCursor clang_getOverloadedDecl(CXCursor cursor, uint index);
extern(C) uint clang_getNumOverloadedDecls(CXCursor cursor);
extern(C) CXString clang_constructUSR_ObjCProtocol(const char* protocol_name);
extern(C) CXType clang_getIBOutletCollectionType(CXCursor );
extern(C) CXString clang_getCursorUSR(CXCursor );
extern(C) uint clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data);
extern(C) CXString clang_constructUSR_ObjCClass(const char* class_name);
extern(C) CXType clang_getArrayElementType(CXType T);
extern(C) uint clang_CXXRecord_isAbstract(CXCursor C);
extern(C) uint clang_CXXMethod_isConst(CXCursor C);
extern(C) CXRemapping clang_getRemappings(const char* path);
extern(C) void clang_EvalResult_dispose(CXEvalResult E);
extern(C) char* clang_EvalResult_getAsStr(CXEvalResult E);
extern(C) CXRemapping clang_getRemappingsFromFileList(const char** filePaths, uint numFiles);
extern(C) void clang_remap_getFilenames(CXRemapping , uint index, CXString* original, CXString* transformed);
extern(C) uint clang_remap_getNumFiles(CXRemapping );
extern(C) void clang_remap_dispose(CXRemapping );
extern(C) CXResult clang_findReferencesInFile(CXCursor cursor, CXFile file, CXCursorAndRangeVisitor visitor);
extern(C) double clang_EvalResult_getAsDouble(CXEvalResult E);
extern(C) uint clang_EvalResult_isUnsignedInt(CXEvalResult E);
extern(C) void clang_getInclusions(CXTranslationUnit tu, CXInclusionVisitor visitor, CXClientData client_data);
extern(C) void clang_toggleCrashRecovery(uint isEnabled);
extern(C) ulong clang_EvalResult_getAsUnsigned(CXEvalResult E);
extern(C) CXEvalResult clang_Cursor_Evaluate(CXCursor C);
extern(C) int clang_EvalResult_getAsInt(CXEvalResult E);
extern(C) CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E);
extern(C) long clang_EvalResult_getAsLongLong(CXEvalResult E);
extern(C) CXString clang_getClangVersion();
extern(C) CXResult clang_findIncludesInFile(CXTranslationUnit TU, CXFile file, CXCursorAndRangeVisitor visitor);
extern(C) CXIdxObjCContainerDeclInfo* clang_index_getObjCContainerDeclInfo(const CXIdxDeclInfo* );
extern(C) void clang_IndexAction_dispose(CXIndexAction );
extern(C) CXIndexAction clang_IndexAction_create(CXIndex CIdx);
extern(C) void clang_index_setClientEntity(const CXIdxEntityInfo* , CXIdxClientEntity );
extern(C) int clang_indexSourceFile(CXIndexAction , CXClientData client_data, IndexerCallbacks* index_callbacks, uint index_callbacks_size, uint index_options, const char* source_filename, const char** command_line_args, int num_command_line_args, CXUnsavedFile* unsaved_files, uint num_unsaved_files, CXTranslationUnit* out_TU, uint TU_options);
extern(C) int clang_indexTranslationUnit(CXIndexAction , CXClientData client_data, IndexerCallbacks* index_callbacks, uint index_callbacks_size, uint index_options, CXTranslationUnit );
extern(C) int clang_indexSourceFileFullArgv(CXIndexAction , CXClientData client_data, IndexerCallbacks* index_callbacks, uint index_callbacks_size, uint index_options, const char* source_filename, const char** command_line_args, int num_command_line_args, CXUnsavedFile* unsaved_files, uint num_unsaved_files, CXTranslationUnit* out_TU, uint TU_options);
extern(C) void clang_indexLoc_getFileLocation(CXIdxLoc loc, CXIdxClientFile* indexFile, CXFile* file, uint* line, uint* column, uint* offset);
extern(C) int clang_index_isEntityObjCContainerKind(CXIdxEntityKind );
extern(C) CXIdxClientEntity clang_index_getClientEntity(const CXIdxEntityInfo* );
extern(C) CXIdxClientContainer clang_index_getClientContainer(const CXIdxContainerInfo* );
extern(C) CXIdxObjCCategoryDeclInfo* clang_index_getObjCCategoryDeclInfo(const CXIdxDeclInfo* );
extern(C) CXIdxObjCInterfaceDeclInfo* clang_index_getObjCInterfaceDeclInfo(const CXIdxDeclInfo* );
extern(C) void clang_index_setClientContainer(const CXIdxContainerInfo* , CXIdxClientContainer );
extern(C) CXIdxObjCProtocolRefListInfo* clang_index_getObjCProtocolRefListInfo(const CXIdxDeclInfo* );
extern(C) CXIdxIBOutletCollectionAttrInfo* clang_index_getIBOutletCollectionAttrInfo(const CXIdxAttrInfo* );
extern(C) CXIdxObjCPropertyDeclInfo* clang_index_getObjCPropertyDeclInfo(const CXIdxDeclInfo* );
extern(C) CXIdxCXXClassDeclInfo* clang_index_getCXXClassDeclInfo(const CXIdxDeclInfo* );
extern(C) uint clang_EnumDecl_isScoped(CXCursor C);
extern(C) CXString clang_codeCompleteGetObjCSelector(CXCodeCompleteResults* Results);
extern(C) CXCursorKind clang_codeCompleteGetContainerKind(CXCodeCompleteResults* Results, uint* IsIncomplete);
extern(C) CXString clang_getCursorKindSpelling(CXCursorKind Kind);
extern(C) void clang_disposeTokens(CXTranslationUnit TU, CXToken* Tokens, uint NumTokens);
extern(C) void clang_annotateTokens(CXTranslationUnit TU, CXToken* Tokens, uint NumTokens, CXCursor* Cursors);
extern(C) void clang_getDefinitionSpellingAndExtent(CXCursor , const char** startBuf, const char** endBuf, uint* startLine, uint* startColumn, uint* endLine, uint* endColumn);
extern(C) void clang_executeOnThread(void* fn, void* user_data, uint stack_size);
extern(C) void clang_enableStackTraces();
extern(C) CXCompletionChunkKind clang_getCompletionChunkKind(CXCompletionString completion_string, uint chunk_number);
extern(C) CXString clang_getCompletionChunkText(CXCompletionString completion_string, uint chunk_number);
extern(C) void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken** Tokens, uint* NumTokens);
extern(C) CXSourceLocation clang_getTokenLocation(CXTranslationUnit , CXToken );
extern(C) CXCursor clang_getSpecializedCursorTemplate(CXCursor C);
extern(C) CXCursorKind clang_getTemplateCursorKind(CXCursor C);
extern(C) CXSourceRange clang_getTokenExtent(CXTranslationUnit , CXToken );
extern(C) CXSourceRange clang_getCursorReferenceNameRange(CXCursor C, uint NameFlags, uint PieceIndex);
extern(C) CXTokenKind clang_getTokenKind(CXToken );
extern(C) CXToken* clang_getToken(CXTranslationUnit TU, CXSourceLocation Location);
extern(C) CXString clang_getTokenSpelling(CXTranslationUnit , CXToken );
extern(C) CXString clang_codeCompleteGetContainerUSR(CXCodeCompleteResults* Results);
extern(C) CXCompletionString clang_getCompletionChunkCompletionString(CXCompletionString completion_string, uint chunk_number);
extern(C) uint clang_getCompletionPriority(CXCompletionString completion_string);
extern(C) void clang_sortCodeCompletionResults(CXCompletionResult* Results, uint NumResults);
extern(C) CXCodeCompleteResults* clang_codeCompleteAt(CXTranslationUnit TU, const char* complete_filename, uint complete_line, uint complete_column, CXUnsavedFile* unsaved_files, uint num_unsaved_files, uint options);
extern(C) uint clang_defaultCodeCompleteOptions();
extern(C) void clang_disposeCodeCompleteResults(CXCodeCompleteResults* Results);
extern(C) CXDiagnostic clang_codeCompleteGetDiagnostic(CXCodeCompleteResults* Results, uint Index);
extern(C) uint clang_codeCompleteGetNumDiagnostics(CXCodeCompleteResults* Results);
extern(C) ulong clang_codeCompleteGetContexts(CXCodeCompleteResults* Results);
extern(C) uint clang_getNumCompletionChunks(CXCompletionString completion_string);
extern(C) CXString clang_getCompletionFixIt(CXCodeCompleteResults* results, uint completion_index, uint fixit_index, CXSourceRange* replacement_range);
extern(C) CXCompletionString clang_getCursorCompletionString(CXCursor cursor);
extern(C) uint clang_getCompletionNumAnnotations(CXCompletionString completion_string);
extern(C) CXAvailabilityKind clang_getCompletionAvailability(CXCompletionString completion_string);
extern(C) uint clang_getCompletionNumFixIts(CXCodeCompleteResults* results, uint completion_index);
extern(C) CXString clang_getCompletionAnnotation(CXCompletionString completion_string, uint annotation_number);
extern(C) CXString clang_getCompletionBriefComment(CXCompletionString completion_string);
extern(C) CXString clang_getCompletionParent(CXCompletionString completion_string, CXCursorKind* kind);
extern(C) CXSourceLocation clang_indexLoc_getCXSourceLocation(CXIdxLoc loc);
extern(C) long clang_getNumElements(CXType T);
extern(C) uint clang_isPODType(CXType T);
extern(C) uint clang_getDiagnosticNumRanges(CXDiagnostic );
extern(C) CXString clang_getDiagnosticCategoryText(CXDiagnostic );
extern(C) CXString clang_getDiagnosticCategoryName(uint Category);
extern(C) CXSourceRange clang_getDiagnosticRange(CXDiagnostic Diagnostic, uint Range);
extern(C) CXString clang_getDiagnosticFixIt(CXDiagnostic Diagnostic, uint FixIt, CXSourceRange* ReplacementRange);
extern(C) uint clang_getDiagnosticNumFixIts(CXDiagnostic Diagnostic);
extern(C) CXString clang_getTranslationUnitSpelling(CXTranslationUnit CTUnit);
extern(C) CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char* source_filename, int num_clang_command_line_args, const char** clang_command_line_args, uint num_unsaved_files, CXUnsavedFile* unsaved_files);
extern(C) uint clang_getDiagnosticCategory(CXDiagnostic );
extern(C) CXString clang_getDiagnosticSpelling(CXDiagnostic );
extern(C) void clang_disposeDiagnostic(CXDiagnostic Diagnostic);
extern(C) CXDiagnosticSet clang_getDiagnosticSetFromTU(CXTranslationUnit Unit);
extern(C) CXString clang_getDiagnosticOption(CXDiagnostic Diag, CXString* Disable);
extern(C) CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, uint Options);
extern(C) CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic );
extern(C) uint clang_defaultDiagnosticDisplayOptions();
extern(C) CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic );
extern(C) CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, uint Index);
extern(C) CXTranslationUnit clang_createTranslationUnit(CXIndex CIdx, const char* ast_filename);
extern(C) uint clang_defaultEditingTranslationUnitOptions();
extern(C) void clang_disposeCXTUResourceUsage(CXTUResourceUsage usage);
extern(C) CXTUResourceUsage clang_getCXTUResourceUsage(CXTranslationUnit TU);
extern(C) char* clang_getTUResourceUsageName(CXTUResourceUsageKind kind);
extern(C) CXTargetInfo clang_getTranslationUnitTargetInfo(CXTranslationUnit CTUnit);
extern(C) CXString clang_TargetInfo_getTriple(CXTargetInfo Info);
extern(C) void clang_TargetInfo_dispose(CXTargetInfo Info);
extern(C) int clang_TargetInfo_getPointerWidth(CXTargetInfo Info);
extern(C) CXErrorCode clang_createTranslationUnit2(CXIndex CIdx, const char* ast_filename, CXTranslationUnit* out_TU);
extern(C) int clang_reparseTranslationUnit(CXTranslationUnit TU, uint num_unsaved_files, CXUnsavedFile* unsaved_files, uint options);
extern(C) void clang_disposeTranslationUnit(CXTranslationUnit );
extern(C) CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char* source_filename, const char** command_line_args, int num_command_line_args, CXUnsavedFile* unsaved_files, uint num_unsaved_files, uint options, CXTranslationUnit* out_TU);
extern(C) CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char* source_filename, const char** command_line_args, int num_command_line_args, CXUnsavedFile* unsaved_files, uint num_unsaved_files, uint options);
extern(C) uint clang_defaultReparseOptions(CXTranslationUnit TU);
extern(C) CXErrorCode clang_parseTranslationUnit2FullArgv(CXIndex CIdx, const char* source_filename, const char** command_line_args, int num_command_line_args, CXUnsavedFile* unsaved_files, uint num_unsaved_files, uint options, CXTranslationUnit* out_TU);
extern(C) int clang_saveTranslationUnit(CXTranslationUnit TU, const char* FileName, uint options);
extern(C) uint clang_defaultSaveOptions(CXTranslationUnit TU);
extern(C) uint clang_suspendTranslationUnit(CXTranslationUnit );
extern(C) CXCursor clang_getNullCursor();
extern(C) uint clang_getNumDiagnostics(CXTranslationUnit Unit);
extern(C) void clang_disposeDiagnosticSet(CXDiagnosticSet Diags);
extern(C) CXString clang_File_tryGetRealPathName(CXFile file);
extern(C) int clang_File_isEqual(CXFile file1, CXFile file2);
extern(C) char* clang_getFileContents(CXTranslationUnit tu, CXFile file, size_t* size);
extern(C) CXSourceLocation clang_getNullLocation();
extern(C) CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, uint line, uint column);
extern(C) uint clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2);
extern(C) CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, uint offset);
extern(C) int clang_Location_isInSystemHeader(CXSourceLocation location);
extern(C) CXFile clang_getFile(CXTranslationUnit tu, const char* file_name);
extern(C) int clang_getFileUniqueID(CXFile file, CXFileUniqueID* outID);
extern(C) void clang_CXIndex_setGlobalOptions(CXIndex , uint options);
extern(C) void clang_disposeIndex(CXIndex index);
extern(C) uint clang_isFileMultipleIncludeGuarded(CXTranslationUnit tu, CXFile file);
extern(C) uint clang_CXIndex_getGlobalOptions(CXIndex );
extern(C) CXString clang_getFileName(CXFile SFile);
extern(C) void clang_CXIndex_setInvocationEmissionPathOption(CXIndex , const char* Path);
extern(C) time_t clang_getFileTime(CXFile SFile);
extern(C) CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D);
extern(C) int clang_Location_isFromMainFile(CXSourceLocation location);
extern(C) CXSourceRange clang_getRange(CXSourceLocation begin, CXSourceLocation end);
extern(C) CXSourceRangeList* clang_getAllSkippedRanges(CXTranslationUnit tu);
extern(C) CXSourceRangeList* clang_getSkippedRanges(CXTranslationUnit tu, CXFile file);
extern(C) CXSourceLocation clang_getRangeEnd(CXSourceRange range);
extern(C) void clang_disposeSourceRangeList(CXSourceRangeList* ranges);
extern(C) CXDiagnostic clang_getDiagnosticInSet(CXDiagnosticSet Diags, uint Index);
extern(C) uint clang_getNumDiagnosticsInSet(CXDiagnosticSet Diags);
extern(C) CXDiagnosticSet clang_loadDiagnostics(const char* file, CXLoadDiag_Error* error, CXString* errorString);
extern(C) CXSourceRange clang_getNullRange();
extern(C) CXSourceLocation clang_getRangeStart(CXSourceRange range);
extern(C) void clang_getSpellingLocation(CXSourceLocation location, CXFile* file, uint* line, uint* column, uint* offset);
extern(C) int clang_Range_isNull(CXSourceRange range);
extern(C) uint clang_equalRanges(CXSourceRange range1, CXSourceRange range2);
extern(C) void clang_getFileLocation(CXSourceLocation location, CXFile* file, uint* line, uint* column, uint* offset);
extern(C) void clang_getExpansionLocation(CXSourceLocation location, CXFile* file, uint* line, uint* column, uint* offset);
extern(C) void clang_getInstantiationLocation(CXSourceLocation location, CXFile* file, uint* line, uint* column, uint* offset);
extern(C) void clang_getPresumedLocation(CXSourceLocation location, CXString* filename, uint* line, uint* column);
extern(C) CXType clang_getElementType(CXType T);
extern(C) CXCursor clang_getTranslationUnitCursor(CXTranslationUnit );
extern(C) int clang_Cursor_isNull(CXCursor cursor);
extern(C) uint clang_Cursor_isMacroFunctionLike(CXCursor C);
extern(C) uint clang_isConstQualifiedType(CXType T);
extern(C) CXType clang_getCanonicalType(CXType T);
extern(C) uint clang_Cursor_isMacroBuiltin(CXCursor C);
extern(C) uint clang_isVolatileQualifiedType(CXType T);
extern(C) uint clang_Cursor_isFunctionInlined(CXCursor C);
extern(C) uint clang_isRestrictQualifiedType(CXType T);
extern(C) uint clang_getAddressSpace(CXType T);
extern(C) uint clang_equalTypes(CXType A, CXType B);
extern(C) long clang_Cursor_getTemplateArgumentValue(CXCursor C, uint I);
extern(C) int clang_Cursor_getNumArguments(CXCursor C);
extern(C) int clang_getFieldDeclBitWidth(CXCursor C);
extern(C) ulong clang_Cursor_getTemplateArgumentUnsignedValue(CXCursor C, uint I);
extern(C) CXCursor clang_Cursor_getArgument(CXCursor C, uint i);
extern(C) CXTemplateArgumentKind clang_Cursor_getTemplateArgumentKind(CXCursor C, uint I);
extern(C) int clang_Cursor_getNumTemplateArguments(CXCursor C);
extern(C) CXType clang_Cursor_getTemplateArgumentType(CXCursor C, uint I);
extern(C) ulong clang_getEnumConstantDeclUnsignedValue(CXCursor C);
extern(C) CXString clang_getTypedefName(CXType CT);
extern(C) CXCursor clang_getTypeDeclaration(CXType T);
extern(C) uint clang_Type_getNumObjCTypeArgs(CXType T);
extern(C) CXCursor clang_Type_getObjCProtocolDecl(CXType T, uint i);
extern(C) uint clang_Type_getNumObjCProtocolRefs(CXType T);
extern(C) CXType clang_Type_getObjCTypeArg(CXType T, uint i);
extern(C) CXType clang_getCursorResultType(CXCursor C);
extern(C) uint clang_isFunctionTypeVariadic(CXType T);
extern(C) int clang_getCursorExceptionSpecificationType(CXCursor C);
extern(C) CXType clang_getPointeeType(CXType T);
extern(C) CXType clang_Type_getObjCObjectBaseType(CXType T);
extern(C) int clang_getNumArgTypes(CXType T);
extern(C) CXString clang_Type_getObjCEncoding(CXType type);
extern(C) CXString clang_getDeclObjCTypeEncoding(CXCursor C);
extern(C) CXType clang_getArgType(CXType T, uint i);
extern(C) CXString clang_getTypeKindSpelling(CXTypeKind K);
extern(C) CXType clang_getResultType(CXType T);
extern(C) CXCallingConv clang_getFunctionTypeCallingConv(CXType T);
extern(C) int clang_getExceptionSpecificationType(CXType T);
extern(C) uint clang_equalCursors(CXCursor , CXCursor );
extern(C) long clang_getEnumConstantDeclValue(CXCursor C);
extern(C) CXType clang_getTypedefDeclUnderlyingType(CXCursor C);
extern(C) uint clang_isPreprocessing(CXCursorKind );
extern(C) uint clang_isTranslationUnit(CXCursorKind );
extern(C) uint clang_isInvalid(CXCursorKind );
extern(C) uint clang_isUnexposed(CXCursorKind );
extern(C) CXVisibilityKind clang_getCursorVisibility(CXCursor cursor);
extern(C) CXLinkageKind clang_getCursorLinkage(CXCursor cursor);
extern(C) CXAvailabilityKind clang_getCursorAvailability(CXCursor cursor);
extern(C) int clang_getCursorPlatformAvailability(CXCursor cursor, int* always_deprecated, CXString* deprecated_message, int* always_unavailable, CXString* unavailable_message, CXPlatformAvailability* availability, int availability_size);
extern(C) uint clang_Cursor_hasAttrs(CXCursor C);
extern(C) uint clang_isStatement(CXCursorKind );
extern(C) CXCursorKind clang_getCursorKind(CXCursor );
extern(C) uint clang_hashCursor(CXCursor );
extern(C) uint clang_isAttribute(CXCursorKind );
extern(C) uint clang_isDeclaration(CXCursorKind );
extern(C) uint clang_isReference(CXCursorKind );
extern(C) uint clang_isInvalidDeclaration(CXCursor );
extern(C) uint clang_isExpression(CXCursorKind );
extern(C) CXType clang_getEnumDeclIntegerType(CXCursor C);
extern(C) void clang_disposeCXPlatformAvailability(CXPlatformAvailability* availability);
extern(C) CXTLSKind clang_getCursorTLSKind(CXCursor cursor);
extern(C) CXCursor clang_getCursor(CXTranslationUnit , CXSourceLocation );
extern(C) CXFile clang_getIncludedFile(CXCursor cursor);
extern(C) void clang_disposeOverriddenCursors(CXCursor* overridden);
extern(C) CXSourceLocation clang_getCursorLocation(CXCursor );
extern(C) CXType clang_getCursorType(CXCursor C);
extern(C) CXSourceRange clang_getCursorExtent(CXCursor );
extern(C) CXString clang_getTypeSpelling(CXType CT);
extern(C) CXLanguageKind clang_getCursorLanguage(CXCursor cursor);
extern(C) void clang_getOverriddenCursors(CXCursor cursor, CXCursor** overridden, uint* num_overridden);
extern(C) CXCursor clang_getCursorSemanticParent(CXCursor cursor);
extern(C) CXCursorSet clang_createCXCursorSet();
extern(C) CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor );
extern(C) CXCursor clang_getCursorLexicalParent(CXCursor cursor);
extern(C) void clang_disposeCXCursorSet(CXCursorSet cset);
extern(C) uint clang_CXCursorSet_insert(CXCursorSet cset, CXCursor cursor);
extern(C) uint clang_CXCursorSet_contains(CXCursorSet cset, CXCursor cursor);
extern(C) uint clang_Type_visitFields(CXType T, CXFieldVisitor visitor, CXClientData client_data);
} // 
